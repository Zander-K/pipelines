---
name: Build-android
on:
  push:
    branches:
      - main
  pull_request: 
    branches: 
      - main
  workflow_dispatch:

jobs: 
  extract:
    name: gather and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
      - name: Activate Pipeline
        shell: bash
        run: |
          dart pub global activate -s path ./pipeline_cli
          echo -e "Active Packages:\n"
          dart pub global list

      - name: Extract workflow name
        id: extract-workflow-name
        run: |
          WORKFLOW_NAME=$(basename $GITHUB_WORKFLOW | cut -d'/' -f2)
          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV

      # - name: Extract Label Information
      #   id: extract_label_info
      #   run: |
      #     for label in "${{ github.event.pull_request.labels }}"; do
      #       echo "Label: $label"
      #       echo "LABEL_NAME=$label" >> $GITHUB_ENV
      #       break  # Exit loop after first label (or modify as needed)
      #     done

      - name: Extract Label Information
        if: contains(github.event.pull_request.labels.*.name, 'Grosvenor') || contains(github.event.pull_request.labels.*.name, 'Mecca') 
        id: extract_label_info
        run: |
          label_type="Unknown"
          for label in "${{ toJson(github.event.pull_request.labels.*.name) }}"; do
            if [[ "$label" == *"Grosvenor"* ]]; then
              label_type="Grosvenor"
              break
            elif [[ "$label" == *"Mecca"* ]]; then
              label_type="Mecca"
              break
            fi
          done

          echo "Label: $label_type"
          echo "LABEL_NAME=$label_type" >> $GITHUB_ENV

      

      - name: Extract last commit hash
        id: extract_commit_hash
        run: |
          last_commit="${{ github.sha }}"
          echo "last_commit=${last_commit}" >> $GITHUB_ENV

      - name: Run custom CLI and capture output
        id: custom-cli
        run: |
          CLI_OUTPUT=$(pipe -g ${WORKFLOW_NAME} -g ${LABEL_NAME} -g ${last_commit})
          echo "CLI_OUTPUT<<EOF" >> $GITHUB_ENV
          echo -e "$CLI_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Write to output.txt
        run: |
          
          echo "Current Date: ${current_date}" > output.txt
          echo -e "${CLI_OUTPUT}\n\n" >> output.txt
          # echo "Current Time: ${current_time}" >> output.txt
          # echo "Platform: $PLATFORM_TYPE" >> output.txt
          # echo "Label: ${label_name}" >> output.txt
          # echo "Last Commit: ${last_commit}" >> output.txt
          # echo "${version_build_nr}" >> output.txt
          # echo "Total Build Time: ${total_build_time} seconds" >> output.txt
          # echo "------------------------------" >> output.txt
          # echo "Pubspec.yaml Information:" >> output.txt
          # echo "------------------------------" >> output.txt
          # echo "${PUBSPEC_CONTENTS}" >> output.txt
          # echo "------------------------------" >> output.txt
          # echo ""


      - name: Upload output.txt
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: output.txt

      - name: Output artifact ID
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
          echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'
          echo "ARTIFACT_URL=${{ steps.artifact-upload-step.outputs.artifact-url }}" >> $GITHUB_ENV

      - name: Send notification to Slack
        env:
          SLACK_PIPELINE_URL: ${{ secrets.SLACK_PIPELINE_URL }}
          ARTIFACT_URL: ${{ steps.artifact-upload-step.outputs.artifact-url }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
              "artifact_url": "A new production build has finished. You can download a file with all the information here:\n'${ARTIFACT_URL}'",
              "artifact_contents": "'${CLI_OUTPUT}'"
            }' $SLACK_PIPELINE_URL
