---
name: Build-android
on:
  push:
    branches:
      - main
  pull_request: 
    branches: 
      - main
  workflow_dispatch:

jobs: 
  extract:
    name: gather and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
      - name: Activate Pipeline
        shell: bash
        run: |
          dart pub global activate -s path ./pipeline_cli
          echo -e "Active Packages:\n"
          dart pub global list


      - name: Run custom CLI and capture output
        id: custom-cli
        run: |
          output=$(pipe -g)
          echo "$output"
          echo "CLI_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Determine workflow name
        id: extract-workflow-name
        run: |
          WORKFLOW_NAME=$(basename $GITHUB_WORKFLOW | cut -d'/' -f2)
          echo "Workflow Name: ${WORKFLOW_NAME}"
          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV

      - name: Determine platform type
        run: |
          if [[ $WORKFLOW_NAME == *ios* ]]; then
            PLATFORM_TYPE="iOS"
            echo "Platform: ${PLATFORM_TYPE}"
          elif [[ $WORKFLOW_NAME == *android* ]]; then
            PLATFORM_TYPE="Android"
            echo "Platform: ${PLATFORM_TYPE}"
          else
            PLATFORM_TYPE="Unknown"
            echo "Platform: ${PLATFORM_TYPE}"
          fi
          echo "PLATFORM_TYPE=$PLATFORM_TYPE" >> $GITHUB_ENV

      - name: Extract Grosvenor label information
        if: contains(github.event.pull_request.labels.*.name, 'Grosvenor') || contains(github.event.pull_request.labels.*.name, 'grosvenor') 
        id: gc-extract_label_info
        run: |
          label_name="Grosvenor"
          label_type=$([[ "${label_name}" == "Mecca" || "${label_name}" == "Grosvenor" ]] && echo "${label_name}" || echo "unknown")
          echo "Label: ${label_name}"
          echo "label_name=${label_name}" >> $GITHUB_ENV

      - name: Extract Mecca label information
        if: contains(github.event.pull_request.labels.*.name, 'Mecca') || contains(github.event.pull_request.labels.*.name, 'mecca')
        id: mb-extract_label_info
        run: |
          label_name="Mecca"
          label_type=$([[ "${label_name}" == "Mecca" || "${label_name}" == "Grosvenor" ]] && echo "${label_name}" || echo "unknown")
          echo "Label: ${label_name}"
          echo "label_name=${label_name}" >> $GITHUB_ENV

      - name: Extract last commit hash
        id: extract_commit_hash
        run: |
          last_commit="${{ github.sha }}"
          echo "Last Commit: ${last_commit}"
          echo "last_commit=${last_commit}" >> $GITHUB_ENV
      
      - name: Extract total build time
        id: extract_build_time
        run: |
          build_url="https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          build_info=$(curl -s -H "Accept: application/vnd.github.v3+json" "${build_url}")
          start_time=$(echo "${build_info}" | jq -r '.workflow_run.created_at')
          end_time=$(echo "${build_info}" | jq -r '.workflow_run.updated_at')
          if [ -z "$start_time" ] || [ -z "$end_time" ]; then
            total_build_time=0
          else
            total_build_time=$(($(date -d "${end_time}" +%s) - $(date -d "${start_time}" +%s)))
          fi
          echo "Total Build Time: ${total_build_time} seconds"
          echo "total_build_time=${total_build_time}" >> $GITHUB_ENV

      - name: Read pubspec.yaml contents
        id: read-pubspec
        run: |
          PUBSPEC_CONTENTS=$(cat apps/grosvenor_prod/pubspec.yaml)
          echo "PUBSPEC_CONTENTS<<EOF" >> $GITHUB_ENV
          echo -e "$PUBSPEC_CONTENTS\n" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Extract version and build numbers
        id: extract-version-build
        run: |
          VERSION=$(grep 'version:' apps/grosvenor_prod/pubspec.yaml | awk '{split($2, a, "+"); print a[1]}')
          BUILD=$(grep 'version:' apps/grosvenor_prod/pubspec.yaml | awk '{split($2, a, "+"); print a[2]}')
          echo "Version: ${VERSION}"
          echo "Build: ${BUILD}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      - name: Determine platform type and format output
        run: |
          if [[ $WORKFLOW_NAME == *ios* ]]; then
            version_build_nr="Version Nr: $VERSION\n Build Nr: $BUILD\n"
            echo -e "Version Nr: $VERSION\n Build Nr: $BUILD\n"
            echo -e "version_build_nr=${version_build_nr}" >> $GITHUB_ENV

          elif [[ $WORKFLOW_NAME == *android* ]]; then
            version_build_nr="Build Nr: $BUILD\n"
            echo -e "Build Nr: $BUILD\n"
            echo -e "version_build_nr=${version_build_nr}" >> $GITHUB_ENV

          else
            echo "Platform not recognized."
            version_build_nr="Version Nr: -\n Build Nr: -\n"
            echo -e "Version Nr: -\n Build Nr: -\n"
            echo "version_build_nr=${version_build_nr}" >> $GITHUB_ENV
          fi
        env:
          VERSION: ${{ env.VERSION }}
          BUILD: ${{ env.BUILD }}

      - name: Write to output.txt
        run: |
          echo -e "Output:\n${CLI_OUTPUT}" > output.txt
          echo "Current Date: ${current_date}" >> output.txt
          echo "Current Time: ${current_time}" >> output.txt
          echo "Platform: $PLATFORM_TYPE" >> output.txt
          echo "Label: ${label_name}" >> output.txt
          echo "Last Commit: ${last_commit}" >> output.txt
          echo "${version_build_nr}" >> output.txt
          echo "Total Build Time: ${total_build_time} seconds" >> output.txt
          echo "------------------------------" >> output.txt
          echo "Pubspec.yaml Information:" >> output.txt
          echo "------------------------------" >> output.txt
          echo "${PUBSPEC_CONTENTS}" >> output.txt
          echo "------------------------------" >> output.txt
          echo ""


      - name: Upload output.txt
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: output.txt

      - name: Output artifact ID
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
          echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'

      - run: cat output1.txt >> output2.txt

      - name: Upload output2.txt
        id: artifact-upload-step-1
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: output2.txt

      - name: Output artifact ID
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step-1.outputs.artifact-id }}'
          echo 'Artifact URL is ${{ steps.artifact-upload-step-1.outputs.artifact-url }}'
