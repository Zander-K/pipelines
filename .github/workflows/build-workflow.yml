---
name: Build-android
on:
  push:
    branches:
      - main
  pull_request: 
    branches: 
      - main
  workflow_dispatch:

permissions:
  pull-requests: write
  contents: read

jobs: 
  extract:
    name: gather and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh
          
      - uses: dart-lang/setup-dart@v1
      - name: Activate Pipeline
        shell: bash
        run: |
          dart pub global activate -s path ./pipeline_cli
          echo -e "Active Packages:\n"
          dart pub global list

      - name: Extract PR details
        id: extract-pr-details
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr view --json number --jq '.number')
          LAST_COMMIT=$(gh api repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER/commits --jq '.[-1].sha')
          WORKFLOW_NAME=$GITHUB_WORKFLOW
          PR_LABELS=$(gh pr view $PR_NUMBER --json labels --jq '.labels[].name' | tr '\n' ',' | sed 's/,$//')

          echo "Last Commit: $LAST_COMMIT"
          echo "Workflow Name: $WORKFLOW_NAME"
          echo "PR Labels: $PR_LABELS"

          echo "WORKFLOW_NAME=$WORKFLOW_NAME" >> $GITHUB_ENV
          echo "PR_LABELS=$PR_LABELS" >> $GITHUB_ENV
          echo "LAST_COMMIT=$LAST_COMMIT" >> $GITHUB_ENV

          # CLI_OUTPUT=$(pipe -g ${WORKFLOW_NAME} -g ${PR_LABELS} -g ${LAST_COMMIT})
          CLI_OUTPUT=$(pipe -g --commit $LAST_COMMIT --workflow $WORKFLOW_NAME --labels "$PR_LABELS")

          
          echo "CLI_OUTPUT<<EOF" >> $GITHUB_ENV
          echo -e "$CLI_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # - name: Run custom CLI and capture output
      #   id: custom-cli
      #   run: |
      #     CLI_OUTPUT=$(pipe -g ${WORKFLOW_NAME} -g ${LABEL_NAME} -g ${last_commit})
      #     echo "CLI_OUTPUT<<EOF" >> $GITHUB_ENV
      #     echo -e "$CLI_OUTPUT" >> $GITHUB_ENV
      #     echo "EOF" >> $GITHUB_ENV

      - name: Write to output.txt
        run: |
          echo -e "${CLI_OUTPUT}\n\n" >> output.txt


      - name: Upload output.txt
        id: artifact-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: build-info
          path: output.txt

      - name: Print the full path of output.txt
        run: |
          echo "The full path to output.txt is: $(realpath output.txt)"


      - name: Print the full path of output.txt
        run: |
          echo "The full path to output.txt is: $(pwd)/output.txt"


      - name: Save output.txt path to environment variable
        run: echo "OUTPUT_FILE_PATH=$(pwd)/output.txt" >> $GITHUB_ENV


      - name: Output artifact ID
        run: |
          echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'
          echo 'Artifact URL is ${{ steps.artifact-upload-step.outputs.artifact-url }}'
          echo "ARTIFACT_URL=${{ steps.artifact-upload-step.outputs.artifact-url }}" >> $GITHUB_ENV

      - name: Send notification to Slack
        env:
          SLACK_PIPELINE_URL: ${{ secrets.SLACK_PIPELINE_URL }}
          ARTIFACT_URL: ${{ steps.artifact-upload-step.outputs.artifact-url }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
              "artifact_url": "A new production build has finished. You can download a file with all the information here:\n'${ARTIFACT_URL}'",
              "artifact_contents": "" 
              }' $SLACK_PIPELINE_URL

      - name: Send notification to Slack with Artifact Upload
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_PIPELINE_URL }} 
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          SLACK_CHANNEL: '#your-channel-name'      
          SLACK_USERNAME: 'GitHub Actions'             
          SLACK_COLOR: '#00FF00'                  
          SLACK_ICON_EMOJI: ':rocket:'                     
          SLACK_TITLE: 'Build Notification'
          SLACK_MESSAGE: |
            A new production build has finished.
            Download the artifact using the link below:
            ${{ steps.artifact-upload-step.outputs.artifact-url }}
          SLACK_FILE_UPLOAD: ${{ env.OUTPUT_FILE_PATH }}
          SLACK_CUSTOM_PAYLOAD: '{"current_date":"2024-08-16","current_time":"10:36:09 UTC","workflow_name":"Build-android","platform":"Android","label":"Mecca","commit_hash":"07d12dc78f0797270a499dc5365883d05c092d18","total_build_time_seconds":1800,"build_number":21,"pubspec_yaml_contents":{"name":"meccabingo_prod","version":"1.0.0+21","publish_to":"none","description":"Mecca Bingo app","environment":{"sdk":">=3.1.0 <4.0.0"},"dependency_overrides":{"intl":"0.18.1"},"dependencies":{"appsflyer_sdk":"^6.12.2","auto_animated":"^3.2.0","auto_route":"7.8.4","bloc":"^8.1.2","cached_network_image":"^3.3.0","carousel_slider":"^4.2.1","webview_flutter":"^4.5.0"},"dev_dependencies":{"auto_route_generator":"^7.1.1","build_runner":"^2.4.4","flutter_flavorizr":"^2.2.1","flutter_gen_runner":"^5.4.0","flutter_lints":"^2.0.0"}}}'

      - name: Upload to slack step
        uses: adrey/slack-file-upload-action@master
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          path: ${{ env.OUTPUT_FILE_PATH }}
          channel: riga-pipeline


  slack_upload_job:
    runs-on: ubuntu-latest
    name: Upload test file
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - run: echo "Test file " > test.txt
      - name: Upload to slack step
        uses: adrey/slack-file-upload-action@master
        with:
          token: ${{ secrets.SLACK_TOKEN }}
          path: test.txt
          channel: random